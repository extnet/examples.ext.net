@page "{handler?}"
@model Ext.Net.Examples.Pages.samples.form.fileuploadfield.basic.IndexModel
@{
    Layout = null;

    var uploadDirectEventsBlock = @"{
        click: {
            fn: function(item, e) {
                Ext.net.directRequest({
                    before: function(el, type, action, extraParams, o) {
                        if (!App.BasicForm.getForm().isValid()) {
                            return false;
                        }
                        this.waitWnd = Ext.Msg.wait('Uploading your photo...', 'Uploading');
                    },
                    formId: 'fileUpload',
                    cleanRequest: true,
                    failure: function(response, result, el, type, action, extraParams, o) {
                        Ext.Msg.show({
                            title: 'Error',
                            msg: 'Error during upload',
                            minWidth: 200,
                            modal: true,
                            anchor: 'BasicForm',
                            icon: Ext.Msg.ERROR,
                            buttons: Ext.Msg.OK
                        });
                    },
                    method: 'POST',
                    success: function(response, result, el, type, action, extraParams, o) {
                        this.waitWnd.close()
                    },
                    url: '" + Url.Page("Index") + @"/UploadClick'
                });
            }
        }
    }";
}

<!DOCTYPE html>
<html>
    <head>
        <title>
            FormPanel - Ext.NET Examples
        </title>
        <link href="/resources/css/examples.css" rel="stylesheet" />
        <style>
            #fi-button-msg {
                border: 2px solid #ccc;
                padding: 5px 10px;
                background: #eee;
                margin: 5px;
                float: left;
            }
        </style>
        <script>
            var showFile = function (fb, v) {
                if (v) {
                    var el = Ext.get('fi-button-msg');
                    el.update('<b>Selected:</b> ' + v);
                    if (!el.isVisible()) {
                        el.slideIn('t', {
                            duration: .2,
                            easing: 'easeIn',
                            callback: function () {
                                el.highlight();
                            }
                        });
                    } else {
                        el.highlight();
                    }
                }
            };
        </script>
    </head>
    <body>
        <h1>
            File Upload Field
        </h1>

        <h2>
            Basic FileUpload
        </h2>

        <p>
            A typical file upload field with Ext style. Direct editing of the text field cannot be done in a
                        consistent, cross-browser way, so it is always read-only in this implementation.
        </p>
        <ext-fileUploadField id="BasicField" width="480">
            <buttonConfig>
                <ext-fileButton iconCls="x-md md-icon-attach-file" />
            </buttonConfig>
        </ext-fileUploadField>
        <ext-button text="Get selected file's name">
            <listeners>
                <click handler="var v = App.BasicField.getValue(); Ext.Msg.alert('Selected&nbsp;File', v && v != '' ? v : 'None');" />
            </listeners>
        </ext-button>

        <h2>
            Basic FileUpload (Button-only)
        </h2>

        <p>
            You can also render the file input as a button without the text field, with access to the field's value via the
            standard
            <tt>
                TextField
            </tt>
             interface or by handling the 
            <tt>
                FileSelected
            </tt>
             event (as in this example).
        </p>
        <ext-fileUploadField buttonOnly="true">
            <listeners>
                <change fn="showFile" />
            </listeners>
        </ext-fileUploadField>
        <div id="fi-button-msg" style="display:none;">
        </div>
        <div class="x-clear">
        </div>

        <h2>
            Form Example
        </h2>

        <p>
            The ext-fileUploadField component can also be used in standard form layouts, with support for anchoring,
            validation (the field is required in this example), empty text, etc.
        </p>
        <form id="fileUpload" enctype="multipart/form-data" method="post">
            <ext-formPanel
                id="BasicForm"
                width="500"
                frame="true"
                title="File Upload Form"
                paddingAsString="10px 10px 0 10px"
                x-labelWidth="50">
                <defaults>
                    <ext-add key="anchor" value="95%" mode="Value" />
                    <ext-add key="allowBlank" value="false" mode="Raw" />
                    <ext-add key="msgTarget" value="side" mode="Value" />
                </defaults>
                <items>
                    <ext-textField id="PhotoName" fieldLabel="Name" name="desc" />
                    <ext-fileUploadField
                        id="FileUploadField1"
                        name="file"
                        emptyText="Select an image"
                        fieldLabel="Photo"
                        buttonText="">
                        <buttonConfig>
                            <ext-fileButton iconCls="x-md md-icon-add-photo-alternate" />
                        </buttonConfig>
                    </ext-fileUploadField>
                </items>
                <listeners>
                    <validityChange handler="App.SaveButton.setDisabled(!valid);" />
                </listeners>
                <buttons>
                    <ext-button id="SaveButton" text="Save" disabled="true">
                        <customConfig>
                            <ext-add key="directEvents" value="@uploadDirectEventsBlock" mode="Raw" />
                        </customConfig>
                    </ext-button>
                    <ext-button text="Reset">
                        <listeners>
                            <click handler="App.BasicForm.getForm().reset();" />
                        </listeners>
                    </ext-button>
                </buttons>
            </ext-formPanel>
        </form>
    </body>
</html>
